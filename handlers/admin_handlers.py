from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import Database
from keyboards import get_admin_keyboard, get_admin_panel_keyboard, get_vacancies_keyboard, get_main_keyboard
from utils.decorators import admin_only
import messages
from utils.logger import log_message
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
EDIT_TITLE = 1
EDIT_DESCRIPTION = 2

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
AWAITING_TITLE = 1
AWAITING_DESCRIPTION = 2

def get_vacancy_edit_keyboard(vacancy_id: int, is_active: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    status_emoji = "‚úÖ" if is_active else "‚ùå"
    keyboard = [
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        [
            InlineKeyboardButton(
                text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
                callback_data=f"edit_title_{vacancy_id}"
            ),
            InlineKeyboardButton(
                text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                callback_data=f"edit_desc_{vacancy_id}"
            )
        ],
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∞—Ç—É—Å –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        [
            InlineKeyboardButton(
                text=f"–°—Ç–∞—Ç—É—Å: {status_emoji}",
                callback_data=f"toggle_status_{vacancy_id}"
            ),
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_vacancy_{vacancy_id}"
            )
        ],
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        [
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="edit_vacancies"
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

@admin_only
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "admin", "–û—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    db = Database()
    vacancies = db.get_active_vacancies()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    keyboard = []
    row = []
    for i, vacancy in enumerate(vacancies, 1):
        row.append(
            InlineKeyboardButton(
                text=vacancy.title,
                callback_data=f"vacancy_{vacancy.id}"
            )
        )
        
        if i % 2 == 0 or i == len(vacancies):
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(
            text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            callback_data="admin_panel"
        )
    ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = messages.ADMIN_START
    if vacancies:
        message_text += "\n\nüìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*"
    else:
        message_text += "\n\n‚ùóÔ∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π*"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )

@admin_only
async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "admin", "–û—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    await query.message.edit_text(
        messages.ADMIN_PANEL,
        reply_markup=get_admin_panel_keyboard(),
        parse_mode='Markdown'
    )

@admin_only
async def show_vacancies_for_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "admin", "–û—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    db = Database()
    vacancies = db.get_all_vacancies()
    
    if not vacancies:
        await query.message.edit_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=get_admin_panel_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫—É
    keyboard = []
    row = []
    for i, vacancy in enumerate(vacancies, 1):
        status_emoji = "‚úÖ" if vacancy.is_active else "‚ùå"
        row.append(
            InlineKeyboardButton(
                text=f"{status_emoji} {vacancy.title}",
                callback_data=f"edit_vacancy_{vacancy.id}"
            )
        )
        
        if i % 2 == 0 or i == len(vacancies):
            keyboard.append(row)
            row = []
    
    keyboard.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="admin_panel"
        )
    ])
    
    await query.message.edit_text(
        messages.EDIT_VACANCIES_LIST,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

@admin_only
async def edit_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[2])
    user = update.effective_user
    
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    
    if not vacancy:
        await query.message.edit_text(
            "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_admin_panel_keyboard(),
            parse_mode='Markdown'
        )
        return
    
    log_message(user.id, user.username or "Unknown", "edit", "–ù–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}")
    
    status = "–ê–∫—Ç–∏–≤–Ω–∞—è ‚úÖ" if vacancy.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è ‚ùå"
    await query.message.edit_text(
        messages.EDIT_VACANCY.format(
            title=vacancy.title,
            status=status,
            description=vacancy.description
        ),
        reply_markup=get_vacancy_edit_keyboard(vacancy_id, vacancy.is_active),
        parse_mode='Markdown'
    )

@admin_only
async def toggle_vacancy_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[2])
    user = update.effective_user
    
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    
    if not vacancy:
        await query.message.edit_text(
            "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode='Markdown'
        )
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = not vacancy.is_active
    db.update_vacancy(vacancy_id, is_active=new_status)
    
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª"
    log_message(
        user.id,
        user.username or "Unknown",
        "edit",
        f"{status_text} –≤–∞–∫–∞–Ω—Å–∏—é",
        f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    status = "–ê–∫—Ç–∏–≤–Ω–∞—è ‚úÖ" if new_status else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è ‚ùå"
    await query.message.edit_text(
        messages.EDIT_VACANCY.format(
            title=vacancy.title,
            status=status,
            description=vacancy.description
        ),
        reply_markup=get_vacancy_edit_keyboard(vacancy_id, new_status),
        parse_mode='Markdown'
    )

@admin_only
async def delete_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[2])
    user = update.effective_user
    
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    log_message(user.id, user.username or "Unknown", "deleted vacancy", f"Vacancy: {vacancy.title}")
    
    # –ü–æ–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    db.update_vacancy(vacancy_id, is_active=False)
    
    await query.message.edit_text(
        messages.VACANCY_DELETED,
        reply_markup=get_admin_panel_keyboard(),
        parse_mode='Markdown'
    )

@admin_only
async def start_add_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "admin", "–ù–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    
    await query.message.edit_text(
        "*–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Python Developer, Project Manager –∏ —Ç.–¥.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_panel")
        ]]),
        parse_mode='Markdown'
    )
    return AWAITING_TITLE

@admin_only
async def process_vacancy_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    user = update.effective_user
    title = update.message.text
    log_message(user.id, user.username or "Unknown", "edit", "–í–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
    
    context.user_data['new_vacancy_title'] = title
    await update.message.reply_text(
        "*–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.*\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n"
        "‚Ä¢ –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –£—Å–ª–æ–≤–∏—è\n"
        "‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.",
        parse_mode='Markdown'
    )
    return AWAITING_DESCRIPTION

@admin_only
async def process_vacancy_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    user = update.effective_user
    title = context.user_data['new_vacancy_title']
    description = update.message.text
    
    db = Database()
    vacancy_id = db.add_vacancy(title, description)
    vacancy = db.get_vacancy(vacancy_id)
    
    log_message(user.id, user.username or "Unknown", "edit", "–°–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é", f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
    
    await update.message.reply_text(
        f"‚úÖ *–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
        f"üìã *{vacancy.title}*\n\n"
        f"{vacancy.description}",
        reply_markup=get_admin_panel_keyboard(),
        parse_mode='Markdown'
    )
    return ConversationHandler.END

@admin_only
async def start_edit_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[2])
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    
    if not vacancy:
        await query.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode='Markdown')
        return ConversationHandler.END
    
    context.user_data['editing_vacancy_id'] = vacancy_id
    
    await query.message.edit_text(
        messages.ENTER_NEW_TITLE.format(current_title=vacancy.title),
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{vacancy_id}")
        ]]),
        parse_mode='Markdown'
    )
    return EDIT_TITLE

@admin_only
async def start_edit_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[2])
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    
    if not vacancy:
        await query.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode='Markdown')
        return ConversationHandler.END
    
    context.user_data['editing_vacancy_id'] = vacancy_id
    
    await query.message.edit_text(
        messages.ENTER_NEW_DESCRIPTION.format(current_description=vacancy.description),
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{vacancy_id}")
        ]]),
        parse_mode='Markdown'
    )
    return EDIT_DESCRIPTION

@admin_only
async def process_edit_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    vacancy_id = context.user_data.get('editing_vacancy_id')
    if not vacancy_id:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    new_title = update.message.text
    db = Database()
    db.update_vacancy(vacancy_id, title=new_title)
    vacancy = db.get_vacancy(vacancy_id)
    
    await update.message.reply_text(
        messages.VACANCY_UPDATED.format(
            title=vacancy.title,
            status="–ê–∫—Ç–∏–≤–Ω–∞—è ‚úÖ" if vacancy.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è ‚ùå",
            description=vacancy.description
        ),
        reply_markup=get_vacancy_edit_keyboard(vacancy_id, vacancy.is_active),
        parse_mode='Markdown'
    )
    return ConversationHandler.END

@admin_only
async def process_edit_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    vacancy_id = context.user_data.get('editing_vacancy_id')
    if not vacancy_id:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    new_description = update.message.text
    db = Database()
    db.update_vacancy(vacancy_id, description=new_description)
    vacancy = db.get_vacancy(vacancy_id)
    
    await update.message.reply_text(
        messages.VACANCY_UPDATED.format(
            title=vacancy.title,
            status="–ê–∫—Ç–∏–≤–Ω–∞—è ‚úÖ" if vacancy.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è ‚ùå",
            description=vacancy.description
        ),
        reply_markup=get_vacancy_edit_keyboard(vacancy_id, vacancy.is_active),
        parse_mode='Markdown'
    )
    return ConversationHandler.END

@admin_only
async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[2])
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    
    await query.message.edit_text(
        messages.EDIT_VACANCY.format(
            title=vacancy.title,
            status="–ê–∫—Ç–∏–≤–Ω–∞—è ‚úÖ" if vacancy.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è ‚ùå",
            description=vacancy.description
        ),
        reply_markup=get_vacancy_edit_keyboard(vacancy_id, vacancy.is_active),
        parse_mode='Markdown'
    )
    return ConversationHandler.END

@admin_only
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "back", "–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    db = Database()
    vacancies = db.get_active_vacancies()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫—É
    keyboard = []
    row = []
    for i, vacancy in enumerate(vacancies, 1):
        row.append(
            InlineKeyboardButton(
                text=vacancy.title,
                callback_data=f"vacancy_{vacancy.id}"
            )
        )
        
        if i % 2 == 0 or i == len(vacancies):
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(
            text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            callback_data="admin_panel"
        )
    ])
    
    await query.message.edit_text(
        messages.BACK_TO_ADMIN_VACANCIES,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

@admin_only
async def process_application_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∫–ª–∏–∫ (–ø—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data: application_[accept/reject]_[id]
    parts = query.data.split('_')
    if len(parts) != 3:
        await query.message.edit_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–∞.")
        return
    
    action = parts[1]
    application_id = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
    moderator = update.effective_user
    moderator_name = f"@{moderator.username}" if moderator.username else f"ID: {moderator.id}"
    
    db = Database()
    application = db.get_application(application_id)
    if not application:
        await query.message.edit_text("–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    vacancy = db.get_vacancy(application.vacancy_id)
    if not vacancy:
        await query.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
    status = 'accepted' if action == 'accept' else 'rejected'
    feedback = None
    message_text = None
    
    if status == 'accepted':
        feedback = "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!"
        message_text = messages.APPLICATION_ACCEPTED.format(title=vacancy.title)
    else:
        feedback = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
        message_text = messages.APPLICATION_REJECTED.format(title=vacancy.title)
    
    db.update_application_status(application_id, status, feedback)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=application.user_id,
            text=message_text,
            parse_mode='Markdown'
        )
        log_message(
            application.user_id,
            "System",
            "admin",
            f"–û—Ç–∫–ª–∏–∫ {'–ø—Ä–∏–Ω—è—Ç' if status == 'accepted' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}",
            f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
    status_emoji, status_text = messages.APPLICATION_STATUS[status]
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    await query.message.edit_text(
        messages.APPLICATION_RESPONSE.format(
            original_message=query.message.text,
            status_emoji=status_emoji,
            status_text=status_text,
            moderator=moderator_name,
            date=current_time
        ),
        parse_mode='Markdown'
    )
