from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import Database
from keyboards import (
    get_vacancies_keyboard, get_vacancy_actions_keyboard,
    get_back_to_list_keyboard, get_main_keyboard,
    get_back_to_main_keyboard
)
import messages
from utils.logger import log_message
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AWAITING_APPLICATION = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "start", "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    db = Database()
    vacancies = db.get_active_vacancies()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    keyboard = []
    row = []
    for i, vacancy in enumerate(vacancies, 1):
        row.append(
            InlineKeyboardButton(
                text=vacancy.title,
                callback_data=f"vacancy_{vacancy.id}"
            )
        )
        
        if i % 2 == 0 or i == len(vacancies):
            keyboard.append(row)
            row = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = messages.START_MESSAGE
    if vacancies:
        message_text += "\n\nüìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*"
    else:
        message_text += "\n\n‚ùóÔ∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π*"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )

async def show_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[1])
    user = update.effective_user
    
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    
    if not vacancy:
        await query.message.edit_text(
            "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode='Markdown'
        )
        return
    
    log_message(user.id, user.username or "Unknown", "view", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤–∞–∫–∞–Ω—Å–∏—é", f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
    can_apply = db.can_apply_to_vacancy(user.id, vacancy_id)
    
    message_text = messages.VACANCY_DETAILS.format(
        title=vacancy.title,
        description=vacancy.description
    )
    
    if not can_apply:
        message_text += "\n\n" + messages.ALREADY_APPLIED
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="back_to_vacancies"
            )
        ]])
    else:
        keyboard = get_vacancy_actions_keyboard(vacancy_id)
    
    await query.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def apply_to_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = int(query.data.split('_')[1])
    user = update.effective_user
    
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
    if not db.can_apply_to_vacancy(user.id, vacancy_id):
        log_message(user.id, user.username or "Unknown", "error", "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞", f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}")
        await query.message.edit_text(
            messages.ALREADY_APPLIED,
            reply_markup=get_back_to_list_keyboard(),
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    log_message(user.id, user.username or "Unknown", "start", "–ù–∞—á–∞–ª –æ—Ç–∫–ª–∏–∫", f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}")
    context.user_data['applying_to_vacancy'] = vacancy_id
    await query.message.edit_text(
        messages.APPLY_INSTRUCTIONS,
        parse_mode='Markdown'
    )
    return AWAITING_APPLICATION

async def process_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user = update.effective_user
    vacancy_id = context.user_data.get('applying_to_vacancy')
    
    if not vacancy_id:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_back_to_list_keyboard(),
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    db = Database()
    vacancy = db.get_vacancy(vacancy_id)
    if not vacancy:
        await update.message.reply_text(
            "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_back_to_list_keyboard(),
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    application_text = update.message.text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        application_id = db.add_application(user.id, vacancy_id)
        if not application_id:
            log_message(user.id, user.username or "Unknown", "error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞", f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}")
            await update.message.reply_text(
                messages.ALREADY_APPLIED,
                reply_markup=get_back_to_list_keyboard(),
                parse_mode='Markdown'
            )
            return ConversationHandler.END
        
        log_message(user.id, user.username or "Unknown", "success", "–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫–ª–∏–∫", f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"application_accept_{application_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"application_reject_{application_id}")
            ]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        await context.bot.send_message(
            chat_id=context.bot_data['config'].feedback_chat_id,
            text=messages.NEW_APPLICATION.format(
                title=vacancy.title,
                username=user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                user_id=user.id,
                application_text=application_text
            ),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(
            messages.APPLICATION_SENT,
            reply_markup=get_back_to_list_keyboard(),
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END
    except Exception as e:
        log_message(user.id, user.username or "Unknown", "error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–∏–∫–∞", str(e))
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_list_keyboard(),
            parse_mode='Markdown'
        )
        return ConversationHandler.END

async def back_to_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "back", "–í–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π")
    
    db = Database()
    vacancies = db.get_active_vacancies()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    keyboard = []
    row = []
    for i, vacancy in enumerate(vacancies, 1):
        row.append(
            InlineKeyboardButton(
                text=vacancy.title,
                callback_data=f"vacancy_{vacancy.id}"
            )
        )
        
        if i % 2 == 0 or i == len(vacancies):
            keyboard.append(row)
            row = []
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    is_admin = db.is_admin(user.id)
    if is_admin:
        keyboard.append([
            InlineKeyboardButton(
                text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                callback_data="admin_panel"
            )
        ])
    
    if not vacancies:
        await query.message.edit_text(
            messages.NO_VACANCIES,
            parse_mode='Markdown'
        )
        return
    
    await query.message.edit_text(
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "unknown", "–û—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", f"–¢–µ–∫—Å—Ç: {update.message.text[:50]}")
    
    db = Database()
    vacancies = db.get_active_vacancies()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    keyboard = []
    row = []
    for i, vacancy in enumerate(vacancies, 1):
        row.append(
            InlineKeyboardButton(
                text=vacancy.title,
                callback_data=f"vacancy_{vacancy.id}"
            )
        )
        
        if i % 2 == 0 or i == len(vacancies):
            keyboard.append(row)
            row = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = db.is_admin(user.id)
    
    # –î–ª—è –∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if is_admin:
        keyboard.append([
            InlineKeyboardButton(
                text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                callback_data="admin_panel"
            )
        ])
    
    await update.message.reply_text(
        messages.UNKNOWN_MESSAGE,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "view", "–û—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π")
    
    db = Database()
    vacancies = db.get_active_vacancies()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    keyboard = []
    row = []
    for i, vacancy in enumerate(vacancies, 1):
        row.append(
            InlineKeyboardButton(
                text=vacancy.title,
                callback_data=f"vacancy_{vacancy.id}"
            )
        )
        
        if i % 2 == 0 or i == len(vacancies):
            keyboard.append(row)
            row = []
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    is_admin = db.is_admin(user.id)
    if is_admin:
        keyboard.append([
            InlineKeyboardButton(
                text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                callback_data="admin_panel"
            )
        ])
    
    if not vacancies:
        await update.message.reply_text(
            messages.NO_VACANCIES,
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text(
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "view", "–û—Ç–∫—Ä—ã–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    db = Database()
    is_admin = db.is_admin(user.id)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = messages.ABOUT_BOT
        if is_admin:
            admin_info = """

‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞–º–∏
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫"""
            text += admin_info
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    except Exception as e:
        log_message(user.id, user.username or "Unknown", "error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ", str(e))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text_clean = text.replace('*', '').replace('`', '').replace('_', '')
        await update.message.reply_text(
            text_clean,
            disable_web_page_preview=True
        )

async def show_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    log_message(user.id, user.username or "Unknown", "view", "–û—Ç–∫—Ä—ã–ª —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏")
    
    db = Database()
    applications = db.get_user_applications(user.id)
    
    if not applications:
        await update.message.reply_text(
            messages.NO_APPLICATIONS,
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    applications_text = ""
    for title, description, applied_at, is_active, status, feedback in applications:
        date = datetime.fromisoformat(applied_at).strftime("%d.%m.%Y %H:%M")
        status_emoji, status_text = messages.APPLICATION_STATUS[status]
        feedback_text = f"\nüí¨ {feedback}" if feedback else ""
        
        applications_text += messages.APPLICATION_ITEM.format(
            title=title,
            date=date,
            status_emoji=status_emoji,
            status_text=status_text,
            feedback=feedback_text
        )
    
    await update.message.reply_text(
        messages.APPLICATIONS_LIST.format(applications=applications_text),
        parse_mode='Markdown'
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üìã –í–∞–∫–∞–Ω—Å–∏–∏":
        return await show_vacancies(update, context)
    elif text == "üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏":
        return await show_applications(update, context)
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        return await show_about(update, context)
    else:
        return await handle_unknown(update, context)

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    user = update.effective_user
    command = update.message.text
    log_message(user.id, user.username or "Unknown", "error", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
    
    await update.message.reply_text(
        "ü§î *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "‚Ä¢ /vacancies - –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n"
        "‚Ä¢ /applications - –í–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏",
        parse_mode='Markdown'
    )
