import logging
from logging.handlers import RotatingFileHandler
import os
from datetime import datetime
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()

class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    
    COLORS = {
        'INFO': Fore.GREEN,
        'WARNING': Fore.YELLOW,
        'ERROR': Fore.RED,
        'CRITICAL': Fore.RED + Style.BRIGHT,
        'DEBUG': Fore.BLUE
    }
    
    ACTIONS = {
        'start': Fore.CYAN + 'üöÄ –°–¢–ê–†–¢',
        'view': Fore.GREEN + 'üëÄ –ü–†–û–°–ú–û–¢–†',
        'apply': Fore.BLUE + 'üìù –û–¢–ö–õ–ò–ö',
        'admin': Fore.YELLOW + '‚öôÔ∏è –ê–î–ú–ò–ù',
        'error': Fore.RED + '‚ùå –û–®–ò–ë–ö–ê',
        'edit': Fore.MAGENTA + '‚úèÔ∏è –ü–†–ê–í–ö–ê',
        'delete': Fore.RED + 'üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï',
        'unknown': Fore.WHITE + '‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–û',
        'back': Fore.CYAN + '‚Ü©Ô∏è –ù–ê–ó–ê–î',
        'success': Fore.GREEN + '‚úÖ –£–°–ü–ï–•'
    }
    
    def format(self, record):
        if not record.msg.startswith('{'):
            return super().format(record)
            
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            parts = eval(record.msg)
            action_type = parts['type']
            username = parts['user']
            action = parts['action']
            details = parts.get('details', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
            action_color = self.ACTIONS.get(action_type, self.ACTIONS['unknown'])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = datetime.fromtimestamp(record.created).strftime('%H:%M:%S')
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = (
                f"{Fore.WHITE}{time_str} | "
                f"{action_color} | "
                f"{Fore.CYAN}{username}{Fore.WHITE} | "
                f"{action}"
            )
            
            if details:
                msg += f" | {Fore.BLUE}{details}"
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç
            msg += Style.RESET_ALL
            
            return msg
        except:
            return super().format(record)

def setup_logger():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    if not os.path.exists('logs'):
        os.makedirs('logs')

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('vacancy_bot')
    logger.setLevel(logging.INFO)

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)
    file_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Å —Ü–≤–µ—Ç–∞–º–∏)
    console_formatter = ColoredFormatter('%(message)s')

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = RotatingFileHandler(
        f'logs/bot_{datetime.now().strftime("%Y%m%d")}.log',
        maxBytes=5242880,  # 5MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setFormatter(file_formatter)
    file_handler.setLevel(logging.INFO)

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(logging.INFO)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('apscheduler').setLevel(logging.WARNING)
    logging.getLogger('telegram.ext.conversationhandler').setLevel(logging.ERROR)

    return logger

# –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger()

def log_message(user_id: int, username: str, action_type: str, action: str, details: str = None):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (start, view, apply, admin, error, edit, delete, unknown)
    :param action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = {
        'type': action_type,
        'user': f"{username} (ID: {user_id})",
        'action': action,
        'details': details
    }
    logger.info(str(message))
