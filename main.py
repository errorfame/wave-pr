import logging
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from telegram import Update
from telegram.ext import ContextTypes
from config import load_config
from handlers import user_handlers, admin_handlers
from database import Database
from utils.logger import logger, log_message

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(config.token).build()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    application.bot_data['config'] = config
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    logging.getLogger('telegram').setLevel(logging.ERROR)
    logging.getLogger('telegram.ext.conversationhandler').setLevel(logging.ERROR)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(
        filters.Regex('^üìã –í–∞–∫–∞–Ω—Å–∏–∏$'),
        user_handlers.show_vacancies
    ))
    application.add_handler(MessageHandler(
        filters.Regex('^üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏$'),
        user_handlers.show_applications
    ))
    application.add_handler(MessageHandler(
        filters.Regex('^‚ÑπÔ∏è –û –±–æ—Ç–µ$'),
        user_handlers.show_about
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    add_vacancy_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                admin_handlers.start_add_vacancy,
                pattern=r'^add_vacancy$'
            )
        ],
        states={
            admin_handlers.AWAITING_TITLE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    admin_handlers.process_vacancy_title
                )
            ],
            admin_handlers.AWAITING_DESCRIPTION: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    admin_handlers.process_vacancy_description
                )
            ]
        },
        fallbacks=[
            CallbackQueryHandler(
                admin_handlers.show_admin_panel,
                pattern=r'^admin_panel$'
            )
        ]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
    apply_vacancy_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                user_handlers.apply_to_vacancy,
                pattern=r'^apply_\d+$'
            )
        ],
        states={
            user_handlers.AWAITING_APPLICATION: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    user_handlers.process_application
                )
            ]
        },
        fallbacks=[]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
    edit_vacancy_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                admin_handlers.start_edit_title,
                pattern=r'^edit_title_\d+$'
            ),
            CallbackQueryHandler(
                admin_handlers.start_edit_description,
                pattern=r'^edit_desc_\d+$'
            )
        ],
        states={
            admin_handlers.EDIT_TITLE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    admin_handlers.process_edit_title
                )
            ],
            admin_handlers.EDIT_DESCRIPTION: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    admin_handlers.process_edit_description
                )
            ]
        },
        fallbacks=[
            CallbackQueryHandler(
                admin_handlers.cancel_edit,
                pattern=r'^cancel_edit_\d+$'
            )
        ]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("about", user_handlers.show_about))
    application.add_handler(CommandHandler("vacancies", user_handlers.show_vacancies))
    application.add_handler(CommandHandler("applications", user_handlers.show_applications))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
    application.add_handler(add_vacancy_conv)
    application.add_handler(apply_vacancy_conv)
    application.add_handler(edit_vacancy_conv)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(
        user_handlers.show_vacancy,
        pattern=r'^vacancy_\d+$'
    ))
    application.add_handler(CallbackQueryHandler(
        user_handlers.back_to_vacancies,
        pattern=r'^back_to_vacancies$'
    ))
    application.add_handler(CallbackQueryHandler(
        admin_handlers.show_admin_panel,
        pattern=r'^admin_panel$'
    ))
    application.add_handler(CallbackQueryHandler(
        admin_handlers.show_vacancies_for_edit,
        pattern=r'^edit_vacancies$'
    ))
    application.add_handler(CallbackQueryHandler(
        admin_handlers.back_to_main,
        pattern=r'^back_to_main$'
    ))
    application.add_handler(CallbackQueryHandler(
        admin_handlers.edit_vacancy,
        pattern=r'^edit_vacancy_\d+$'
    ))
    application.add_handler(CallbackQueryHandler(
        admin_handlers.toggle_vacancy_status,
        pattern=r'^toggle_status_\d+$'
    ))
    application.add_handler(CallbackQueryHandler(
        admin_handlers.delete_vacancy,
        pattern=r'^delete_vacancy_\d+$'
    ))
    application.add_handler(CallbackQueryHandler(
        admin_handlers.process_application_response,
        pattern=r'^application_(accept|reject)_\d+$'
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(
        filters.COMMAND,
        user_handlers.unknown_command
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        user_handlers.handle_text
    ))
    
    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        user = update.effective_user if update else None
        if user:
            log_message(
                user.id,
                user.username or "Unknown",
                "error",
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ",
                str(context.error)
            )
        else:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(context.error)}")

    application.add_error_handler(error_handler)
    
    logger.info(str({
        'type': 'start',
        'user': 'System',
        'action': '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
    }))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    db = Database()
    
    if db.is_admin(user_id):
        return await admin_handlers.admin_start(update, context)
    return await user_handlers.start(update, context)

if __name__ == '__main__':
    main()
